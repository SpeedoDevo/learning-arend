\import Basics
\import Equality
\import Indexed
\import Proofs
\import ProofsOfEquality
\import Records

\module Filter \where {
  \open Data (Bool, true, false)
  \open Lists (List, cons, nil, /)

  \func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => \case p x \with {
      | true => x / filter p xs
      | false => filter p xs
    }

  \func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | nil => nil
    | cons x xs => helper (p x) x (filter p xs)
    \where
      \func helper {A : \Type} (b : Bool) (x : A) (r : List A) : List A \elim b
        | true => x / r
        | false => r

  \module Exercise1 \where {
    \open Lists (++)

    \func qsort (xs : List Nat) : List Nat => sort xs xs
      \where {
        \func sort (xs c : List Nat) : List Nat
          | nil, _ => nil
          | _, nil => nil
          | cons x xs, cons c cs =>
            \let (leq, gt) => partition x xs
            \in (sort leq cs) ++ (x / (sort gt cs))

        \func \infix 4 <= (n m : Nat) : Bool
          | 0, 0 => true
          | 0, suc m => true
          | suc n, 0 => false
          | suc n, suc m => n <= m

        \func partition (pivot : Nat) (xs : List Nat) : \Sigma (leq gt : List Nat) \elim xs
          | nil => (nil, nil)
          | cons a xs =>
            \let (leq, gt) => partition pivot xs
            \in \case a <= pivot
            \with {
              | true => (a / leq, gt)
              | false => (leq, a / gt)
            }

        \func test-partition : partition 2 (1 / 2 / 3 / 4 / nil) = (1 / 2 / nil, 3 / 4 / nil) => idp

        \func test-qsort :
          qsort (91 / 47 / 51 / 18 / 38 / 5 / 100 / nil)
            =
          (5 / 18 / 38 / 47 / 51 / 91 / 100 / nil) => idp
      }
  }
}

\module Case \where {
  \open Data (Bool, true, false)
  \open Data.Exercise5 (<)

  \func not (b : Bool) : Bool
    | true => false
    | false => true

  \func foo {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
    \case p a \as b \return b = not (not b) \with {
      | true => idp
      | false => idp
    }

  \func foo' {A : \Type} (p : A -> Bool) (a : A) : p a = not (not (p a)) =>
    helper (p a)
    \where
      \func helper (b : Bool) : b = not (not b) \elim b
        | true => idp
        | false => idp

  \data Ordering | LT | EQ | GT

  \func compare (x y : Nat) : Ordering =>
    \case x < y, y < x \with {
      | true, true => EQ -- this will never be matched
      | true, false => LT
      | false, true => GT
      | false, false => EQ
    }
}

\module FilterProof \where {
  \open Data (Unit, unit, Empty, Bool, true, false)
  \open Data.Exercise2 (if)
  \open Lists (List, cons, nil, /)
  \open CurryHoward (absurd)
  \open Filter

  \func \infix 4 <= (x y : Nat) : \Type
    | 0, _ => Unit
    | suc _, 0 => Empty
    | suc x, suc y => x <= y

  \func length {A : \Type} (xs : List A) : Nat
    | nil => 0
    | cons _ xs => suc (length xs)

  \func <=-helper {x y : Nat} (p : x <= y) : x <= suc y \elim x, y
    | 0, _ => unit
    | suc x, 0 => absurd p
    | suc x, suc y => <=-helper p

  \func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter p xs) <= length xs \elim xs
    | nil => unit
    | cons x xs =>
      \case p x \as b
      \return length (
        \case b
        \with {
          | true => x / (filter p xs)
          | false => filter p xs
        }) <= suc (length xs)
      \with {
        | true => filter-lem p xs
        | false => <=-helper (filter-lem p xs)
      }

  \module Exercise2 \where {
    \func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
      | nil => nil
      | cons x xs => \let r => filter p xs \in if (p x) (x / r) r

    \func proof {A : \Type} (p : A -> Bool) (xs : List A) : length (filter p xs) <= length xs \elim xs
      | nil => unit
      | cons a xs =>
        \case p a \as b
        \return length (
          \let r => filter p xs
          \in if b (a / r) r) <= suc (length xs)
        \with {
          | true => proof p xs
          | false => <=-helper (proof p xs)
        }
  }
}

\module Elim \where {
  \open Data (Bool, true, false)

  \func \infixr 3 && (x y : Bool) : Bool \elim x
    | true => y
    | false => false

  --  \func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) => \case x \with {
  --    | true => {?}
  --    | false => {?}
  --  }

  \func &&-assoc' (x y z : Bool) : (x && y) && z = x && (y && z) =>
    \case x \as x'
    \return (x' && y) && z = x' && (y && z)
    \with {
      | true => idp
      | false => idp
    }

  \func &&-assoc'' (x y z : Bool) : (x && y) && z = x && (y && z) => \case \elim x \with {
    | true => idp
    | false => idp
  }
}

\module MAtchingIdp \where {
  \open Data (Bool, true, false, not)
  \open SymmetryTransitivityLeibniz (transport, inv)

  \func baz {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) : B (p a) =>
    \case p a \as b, idp : b = p a \with {
      | true, q => transport B q pt
      | false, q => transport B q pf
    }

  \func baz' {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) : B (p a) =>
    helper B p a pt pf (p a) idp
    \where
      \func helper {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false)
                   (b : Bool) (q : b = p a) : B (p a) \elim b
        | true => transport B q pt
        | false => transport B q pf

  \func baz'' {A : \Type} (B : Bool -> \Type) (p : A -> Bool) (a : A) (pt : B true) (pf : B false) : B (p a) =>
    \case p a \as b
    \return B b
    \with {
      | true => pt
      | false => pf
    }

  \func bar {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
    : not (q a) = p a =>
    \case p a \as x, q a \as y, s : y = not x
    \return not y = x
    \with {
      | true, true, s' => inv s'
      | true, false, _ => idp
      | false, true, _ => idp
      | false, false, s' => inv s'
    }

  \func bar' {A : \Type} (p q : A -> Bool) (a : A) (s : q a = not (p a))
    : not (q a) = p a => helper (p a) (q a) s
    \where
      \func helper (x y : Bool) (s : y = not x) : not y = x \elim x, y
        | true, true => inv s
        | true, false => idp
        | false, true => idp
        | false, false => inv s

  \module Exercise3 \where {
    \open SymmetryTransitivityLeibniz (pmap)
    \open CommutativityOf+ (*>)

    \func proof {f : Bool -> Bool} {x : Bool} : f (f (f x)) = f x \elim x
      | true =>
        \case f true \as ft, f false \as ff, idp : f true = ft, idp : f false = ff
        \return f (f ft) = ft
        \with {
          | true, true, p, q => pmap f p *> p
          | true, false, p, q => pmap f p *> p
          | false, true, p, q => pmap f q *> p
          | false, false, p, q => pmap f q *> q
        }
      | false =>
        \case f true \as ft, f false \as ff, idp : f true = ft, idp : f false = ff
        \return f (f ff) = ff \with {
          | true, true, p, q => pmap f p *> p
          | true, false, p, q => pmap f q *> q
          | false, true, p, q => pmap f p *> q
          | false, false, p, q => pmap f q *> q
        }
  }
}

\module Views \where {
  \open Nat (*, +)
  \open SymmetryTransitivityLeibniz (pmap)

  \data Parity (n : Nat)
    | even (k : Nat) (p : n = 2 * k)
    | odd (k : Nat) (p : n = 2 * k + 1)

  \func parity (n : Nat) : Parity n
    | 0 => even 0 idp
    | suc n => \case parity n \with {
      | even k p => odd k (pmap suc p)
      | odd k p => even (suc k) (pmap suc p)
    }

  \func div2 (n : Nat) : Nat => \case parity n \with {
    | even k _ => k
    | odd k _ => k
  }

  \module Exercise4 \where {
    \open SymmetryTransitivityLeibniz (inv)
    \open CommutativityOf+ (*>, +-comm)
    \open EquationalReasoning (==<, >==, qed)

    \data \infix 4 < (m n : Nat) \with
      | 0, suc n => z<s
      | suc m, suc n => s<s (m < n)

    \data QR (n m : Nat)
      | qr (q r : Nat) (t : r < m) (p : n = q * m + r)

    \data Compare (m n : Nat)
      | lt (l : m < n)
      | eq (e : m = n)
      | gt (g : n < m)

    \func compare (m n : Nat) : Compare m n
      | 0, 0 => eq idp
      | 0, suc n => lt z<s
      | suc m, 0 => gt z<s
      | suc m, suc n => \case compare m n \with {
        | lt l => lt (s<s l)
        | eq e => eq (pmap suc e)
        | gt g => gt (s<s g)
      }

    \func <absurd {m n : Nat} (p : m < n) (q : n < suc m) {A : \Type} : A \elim m, n, p, q
      | 0, suc n, z<s, s<s ()
      | suc m, suc n, s<s p, s<s q => <absurd p q

    \func _0*n {n : Nat} : 0 = 0 * n \elim n
      | 0 => idp
      | suc n => _0*n

    \func _1*n {n : Nat} : n = 1 * n \elim n
      | 0 => idp
      | suc n => pmap suc _1*n

    \func toQR (n m : Nat) (nz : 0 < m) : QR n m \elim n
      | 0 => qr 0 0 nz _0*n
      | suc n =>
        \case toQR n m nz \with {
          | qr q r t p' =>
            \case compare (suc r) m \with {
              | lt l => qr q (suc r) l (pmap suc p')
              | eq e => qr (suc q) 0 nz (eq-case e p')
              | gt g => <absurd t g
            }
        }
      \where {
        \open AssociativityOfAppend.Exercise2 (z+-is-id)

        \func eq-case {n m q r : Nat} (e : suc r = m) (p : n = q * m + r) : suc n = suc q * m =>
          suc n
            ==< pmap suc p >==
          suc (q * m + r)
            ==< idp >==
          q * m + suc r
            ==< pmap (\lam x => q * m + x) e >==
          q * m + m
            ==< suc-* >==
          suc q * m
            `qed

        \func suc-* {m n : Nat} : m * n + n = suc m * n \elim m, n
          | 0, 0 => idp
          | 0, suc n => pmap suc (
            0 * n + n
              ==< pmap (\lam z => z + n) (inv _0*n) >==
            0 + n
              ==< z+-is-id >==
            n
              ==< _1*n >==
            1 * n
              `qed
          )
          | suc m, 0 => idp
          | suc m, suc n => pmap suc (
            suc (suc m * n + m) + n
              ==< suc-+ >==
            suc (suc m * n + m + n)
              ==< pmap (\lam x => suc x) (+-assoc (suc m * n) m n) >==
            suc (suc m * n + (m + n))
              ==< pmap (\lam x => suc (suc m * n + x)) (+-comm m n) >==
            suc (suc m * n + (n + m))
              ==< pmap (\lam x => suc x) (inv (+-assoc (suc m * n) n m)) >==
            suc (suc m * n + n + m)
              ==< pmap (\lam x => suc (x + m)) suc-* >==
            suc (suc (suc m) * n + m)
              `qed
          )
          \where {
            \open Sort (+-assoc)
          }

        \func suc-+ {m n : Nat} : suc m + n = suc (m + n) \elim m, n
          | 0, 0 => idp
          | 0, suc n => pmap suc (+-comm 1 n *> pmap suc (inv z+-is-id))
          | suc m, 0 => idp
          | suc m, suc n => pmap suc suc-+
      }

    \func div (m n : Nat) : Nat => \case compare 0 n \with {
      | lt l => \case toQR m n l \with {
        | qr q r t p => q
      }
      | eq e => 0
      | gt ()
    }

    \func test-div : 9 `div` 3 = 3 => idp

    \func test-div' : 3 `div` 9 = 0 => idp

    \func test-div'' : (8 `div` 2) `div` 2 = 2 => idp
  }
}

\module DecidablePredicates \where {
  \open Data (Empty, Unit, unit)
  \open SymmetryTransitivityLeibniz (transport)

  \data Decide (A : \Type)
    | yes A
    | no (A -> Empty)

  \func DecPred {A : \Type} (P : A -> \Type) => \Pi (a : A) -> Decide (P a)

  \func suc/=0 {n : Nat} (p : suc n = 0) : Empty =>
    transport (\lam n => \case n \with {
      | 0 => Empty
      | suc _ => Unit
    }) p unit

  -- the predicate \lam n => n = 0 is decidable

  \func decide0 : DecPred (\lam (n : Nat) => n = 0) =>
    \lam n =>
        \case n \as n'
        \return Decide (n' = 0)
        \with {
          | 0 => yes idp
          | suc _ => no suc/=0
        }

  \module Exercise5 \where {
    \open Data (Bool, true, false, not)
    \open Propositions (T)

    \func isEven (n : Nat) : Bool
      | 0 => true
      | suc n => not (isEven n)

    \func proof : DecPred (\lam n => T (isEven n)) =>
      \lam n =>
          \case isEven n \as e
          \return Decide (T e)
          \with {
            | true => yes unit
            | false => no (\lam x => x)
          }
  }
}

\module DecidableEquality \where {
  \open DecidablePredicates
  \open Data (Bool, true, false)
  \open SymmetryTransitivityLeibniz (inv, pmap)

  \func DecEq (A : \Type) => \Pi (a a' : A) -> Decide (a = a')

  \class Eq (A : \Type) {
    | decideEq : DecEq A

    \func \infix 4 == (a a' : A) : Bool => \case decideEq a a' \with {
      | yes _ => true
      | no _ => false
    }
  } \where {
    \func \infix 4 ==' {e : Eq} (a a' : e.A) : Bool => \case e.decideEq a a' \with {
      | yes _ => true
      | no _ => false
    }
  }

  \open Eq

  \func pred (n : Nat) : Nat
    | 0 => 0
    | suc n => n

  \instance NatEq : Eq Nat
    | decideEq => decideEq
    \where
      \func decideEq (x y : Nat) : Decide (x = y)
        | 0, 0 => yes idp
        | 0, suc y => no (\lam p => suc/=0 (inv p))
        | suc x, 0 => no suc/=0
        | suc x, suc y => \case decideEq x y \with {
          | yes p => yes (pmap suc p)
          | no c => no (\lam p => c (pmap pred p))
        }

  \func test-NatEq : (0 == 0) = true => idp

  \func test-NatEq' : (0 == 1) = false => idp

  \module Exercise6 \where {
    \open Lists (List, cons, nil, /)
    \open SymmetryTransitivityLeibniz (transport)
    \open SymmetryTransitivityLeibniz.Exercise1 (pmap2)
    \open Data (Empty, Unit, unit)

    \instance ListEq {e : Eq} : Eq (List e.A)
      | decideEq => decideEq
      \where {
        \func decideEq {e : Eq} (xs ys : List e.A) : Decide (xs = ys) \elim xs, ys
          | nil, nil => yes idp
          | nil, cons a ys => no nil/=cons
          | cons a xs, nil => no (\lam x => nil/=cons (inv x))
          | cons x xs, cons y ys => \case decideEq xs ys \with {
            | yes xs=ys => \case e.decideEq x y \with {
              | yes x=y => yes (pmap2 cons x=y xs=ys)
              | no nx=y => no (\lam x => nx=y (head x))
            }
            | no nxs=ys => no (\lam x => nxs=ys (tail x))
          }

        \func nil/=cons {A : \Type} {x : A} {xs : List A} (p : nil = cons x xs) : Empty =>
          transport (\lam n => \case n \with {
            | nil => Unit
            | cons _ _ => Empty
          }) p unit

        \func head {A : \Type} {x y : A} {xs ys : List A} (p : cons x xs = cons y ys) : x = y =>
          pmap (\lam xs => \case xs \with {
            | nil => x
            | cons a l => a
          }) p

        \func tail {A : \Type} {x y : A} {xs ys : List A} (p : cons x xs = cons y ys) : xs = ys =>
          pmap (\lam l => \case l \with {
            | nil => nil
            | cons a l => l
          }) p
      }

    \func test-ListEq : (1 / 2 / 3 / nil == 1 / 2 / 3 / nil) = true => idp

    \func test-ListEq' : (nil == 1 / 2 / 3 / nil) = false => idp
  }

  \module Exercise7 \where {
    \open Lists (List, cons, nil, /)
    \open Data (Empty, Unit, unit)
    \open SymmetryTransitivityLeibniz.Exercise1 (pmap2)
    \open CommutativityOf+ (*>)

    \func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
      | 0 => nil
      | suc n => cons a (repeat n a)

    \data Result (A : \Type) (xs : List A)
      | empty (xs = nil)
      | repeated (n : Nat) (a : A) (p : xs = repeat n a)
      | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

    \func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
      | nil => empty idp
      | cons a xs => \case lemma xs {dec} \with {
        | empty p => repeated 1 a (pmap2 cons idp p)
        | repeated n a' p => \case dec a a' \with {
          | yes eq => repeated (suc n) a' (pmap2 cons eq p)
          | no neq => A-is-not-trivial a a' neq
        }
        | A-is-not-trivial a a' neq => A-is-not-trivial a a' neq
      }
  }
}

\module Decidable->Bool \where {
  \open DecidablePredicates
  \open Data (Bool, true, false, Unit, unit)
  \open DependentRecords (T, tt)

  \func FromBoolToDec {A : \Type} (p : A -> Bool) : \Sigma (P : A -> \Type) (DecPred P) =>
    ( \lam a => T (p a)
    , \lam a =>
          \case p a \as b
          \return Decide (T b)
          \with {
            | true => yes tt
            | false => no
                (\lam t => \case t \with {
                })
          }
    )

  \func FromDecToBool {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : A -> Bool =>
    \lam a => \case P.2 a \with {
      | yes _ => true
      | no _ => false
    }

  \module Exercise8 \where {
    \open FunctionalExtensionality (funExt)
    \open Data (Empty)

    \func proof {A : \Type} (ab : A -> Bool) : ab = FromDecToBool (FromBoolToDec ab) =>
      funExt
          (\lam _ => Bool)
          (
            \lam a =>
                \case ab a \as b
                \return (
                  b
                    =
                  (
                    \case
                      \case b \as b
                      \return Decide (T b)
                      \with {
                        | true => yes tt
                        | false => no (\lam t => (\case t \with {
                        }))
                      }
                    \return Bool
                    \with {
                      | yes _ => true
                      | no _ => false
                    }
                  )
                )
                \with {
                  | true => idp
                  | false => idp
                }
          )

    \func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

    \func proof' {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 \elim P
      | (P, d) =>
        \lam a =>
            \let B => \lam (da : Decide (P a)) =>
                \case da
                \return Bool
                \with {
                  | yes _ => true
                  | no _ => false
                }
            \in \case d a \as da
            \return \Sigma (T (B da) -> P a) (P a -> T (B da))
            \with {
              | yes y => (\lam x => y, \lam x => tt)
              | no n =>
                ( \lam x =>
                      \case x \with {
                      }
                , \lam x =>
                      \case n x \with {
                      }
                )
            }
  }
}

\import Basics
\import Equality

\module Records \where {
  \open Nat (+)

  \data NatPair | natPair Nat Nat

  \func natFst (p : NatPair) : Nat
    | natPair x _ => x

  \func natSnd (p : NatPair) : Nat
    | natPair _ y => y

  \record NatPair'
    | fst : Nat
    | snd : Nat

  \func foo (p : NatPair') => fst {p}

  \func foo' (p : NatPair') => NatPair'.fst {p}

  \func bar (p : NatPair') => p.snd

  \func zeroPair => \new NatPair' {
    | fst => 0
    | snd => 0
  }

  \func etaNatPair' (p : NatPair') : p = \new NatPair' { | fst => p.fst | snd => p.snd } => idp

  \func sum (p : NatPair') => fst {p} + p.snd

  \func sum' (p : NatPair') : Nat
    | (a, b) => a + b

  \func zeroPair' : NatPair' \cowith
    | fst => 0
    | snd => 0

  \module Exercise1 \where {
    \func swap-cowith (p : NatPair') : NatPair' \cowith
      | fst => p.snd
      | snd => p.fst

    \func swap-new-pattern (p : NatPair') : NatPair'
      | (f, s) => \new NatPair' {
        | fst => s
        | snd => f
      }

    \func swap-new-field (p : NatPair') : NatPair' =>
      \new NatPair' {
        | fst => p.snd
        | snd => p.fst
      }
  }

  \module Exercise2 \where {
    \open Exercise1 (swap-new-pattern \as swap)
    \open SymmetryTransitivityLeibniz (inv)

    \func swap-involution {p : NatPair'} : swap (swap p) = p => inv (etaNatPair' p)
  }
}

\module Partials \where {
  \open Records

  \func PartialEx : \Type => NatPair' { | fst => 0 }

  \func ppp : NatPair' { | fst => 0 } => \new NatPair' { | snd => 1 }

  \func partial (p : NatPair' { | fst => 0 | snd => 1 }) : PartialEx => p

  \func PartialEx' => NatPair' { | fst => 3 | snd => 7 }

  \func new => \new PartialEx'
}

\module Parameters \where {
  \record Pair (A B : \Type)
    | fst : A
    | snd : B

  \func pairExample : Pair Nat (Nat -> Nat) => \new Pair { | fst => 1 | snd (x : Nat) => x }

  \func pairExample' => \new Pair { | A => Nat | B => Nat -> Nat | fst => 1 | snd (x : Nat) => x }

  \func pairExample'' => \new Pair Nat (Nat -> Nat) 1 (\lam (x : Nat) => x)

  \record NatPair'' (fst'' snd'' : Nat)

  \func natPair''ex => \new NatPair'' {
    | fst'' => 0
    | snd'' => 0
  }

  \record Pair'
    | A : \Type
    | B : \Type
    | fst' : A
    | snd' : B
}

\module DependentRecords \where {
  \data Bool | true | false

  \data T (b : Bool) \with
    | true => tt

  \func isPos (n : Nat) : Bool
    | 0 => false
    | suc _ => true

  \record PosNat (n : Nat) (p : T (isPos n))

  \module Exercise3 \where {
    \open Data (Empty)

    \func proof (pn : PosNat 0) : Empty =>
      \case pn.p \with {
      }
  }

  \module Exercise4 \where {
    \open Data.Exercise5 (gcd)

    \record Coprime {
      | a : Nat
      | b : Nat
      | p : gcd a b = 1
    }

    \func test-Coprime : Coprime => \new Coprime 60 7 idp

    \func Coprime60 => Coprime { | a => 60 }

    \func test-Coprime60 : Coprime60 => \new Coprime { | b => 19 | p => idp }
  }
}

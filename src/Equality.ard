\import Proofs
\import Basics

\module SymmetryTransitivityLeibniz \where {
  \func Leibniz {A : \Type} {a a' : A}
                (f : \Pi (P : A -> \Type) -> \Sigma (P a -> P a') (P a' -> P a)) : a = a' =>
    (f (\lam x => a = x)).1 idp

  \func transport {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
    coe (\lam i => B (p @ i)) b right

  -- symmetry

  \func inv {A : \Type} {a a' : A} (p : a = a') : a' = a =>
    transport (\lam x => x = a) p idp

  -- transitivity

  \func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' =>
    transport (\lam x => a = x) q p

  -- congruence

  \func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' =>
    transport (\lam x => f a = f x) p idp

  \module Exercise1 \where {
    \func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} {b b' : B} (p : a = a') (q : b = b') : f a b = f a' b' =>
      \let
        | s : (a, b) = (a', b) => pmap (\lam x => (x, b)) p
        | t : (a', b) = (a', b') => pmap (\lam x => (a', x)) q
        | u : (a, b) = (a', b') => trans s t
      \in transport (\lam xy => f a b = f xy.1 xy.2) u idp
  }

  \module Exercise2 \where {
    -- Prove that transport can be defined via pmap and repl and vice versa.
    -- The function repl says that if two types are equal then there exists a function between them.

    \func repl {A B : \Type} (p : A = B) : A -> B =>
      \lam a => coe (\lam i => (\lam b => b) (p @ i)) a right

    \func pmap' {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' =>
      coe (\lam i => (\lam x => f a = f x) (p @ i)) idp right

    \func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
      (repl (pmap' B p)) b

    \func repl' {A B : \Type} (p : A = B) : A -> B =>
      \lam a => transport (\lam b => b) p a
  }
}

\module DefinitionOf= \where {
  \func idp {A : \Type} {a : A} : a = a => path (\lam _ => a)

  \module Exercise3 \where {
    -- Prove that left = right without using transport or coe.

    \func proof : left = right => path (\lam i => i)
  }

  \func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' =>
    path (\lam i => f (p @ i))

  \func pmap-idp {A : \Type} {a a' : A} (p : a = a') : pmap {A} (\lam x => x) p = p => idp

  \module Exercise4 \where {
    -- Prove that a = {A} a’ and b = {B} b’ implies (a,b) = {\Sigma A B} (a’,b’) without using transport.

    \func proof {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a, b) = (a', b') =>
      path (\lam i => (p @ i, q @ i))
  }

  \module Exercise5 \where {
    -- Prove that p = {\Sigma (x : A) (B x)} p’ implies p.1 = {A} p’.1 without using transport.

    \func proof {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (q : p = p') : p.1 = p'.1 =>
      path (\lam i => (q @ i).1)
  }
}

\module FunctionalExtensionality \where {
  \open Proofs.CurryHoward (||)
  \open Basics.Data (Empty)

  \func funExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
               (p : \Pi (a : A) -> f a = g a) : f = g =>
    path (\lam i => \lam a => p a @ i)

  {-
    \func lem : \Pi (X : \Type) -> X || (X -> Empty) => {?}

    \func ugly_num : Nat => \case lem Nat \with {
      | Left => 0
      | Right => 1
    }
  -}

  \module Exercise6 \where {
    \open Basics.Data (Bool, not, true, false)

    -- Prove that (\lam x => not (not x)) = (\lam x => x).

    \func proof {x : Bool} : (\lam x => not (not x)) = (\lam x => x) =>
      funExt (\lam _ => Bool) (\lam _ => p)
      \where
        \func p {b : Bool} : not (not b) = b \elim b
          | true => idp
          | false => idp
  }
}

\module Eliminators \where {
  \open Data (Bool, true, false)

  -- Dependent eliminator for Nat (induction).

  \func Nat-elim (P : Nat -> \Type)
                 (z : P zero)
                 (s : \Pi (n : Nat) -> P n -> P (suc n))
                 (x : Nat) : P x \elim x
    | zero => z
    | suc n => s n (Nat-elim P z s n)

  -- Non-dependent eliminator for Nat (recursion).

  \func Nat-rec (P : \Type)
                (z : P)
                (s : Nat -> P -> P)
                (x : Nat) : P \elim x
    | zero => z
    | suc n => s n (Nat-rec P z s n)

  \module Exercise7 \where {
    \open Nat (*)

    -- Define factorial via Nat-rec

    \func fac (n : Nat) : Nat => Nat-rec Nat 1 (\lam x p => (suc x) * p) n

    \func fact-test : fac 10 = 3628800 => idp
  }

  \module Exercise8 \where {
    \open Nat (+)
    \open DefinitionOf= (pmap)

    -- Prove associativity of + via Nat-elim

    \func +-assoc {x y z : Nat} : (x + y) + z = x + y + z =>
      Nat-elim (\lam n => (x + y) + n = x + y + n) idp (\lam _ p => idp) z
  }

  -- Dependent eliminator for Bool (recursor for Bool is just 'if').

  \func Bool-elim (P : Bool -> \Type)
                  (t : P true)
                  (f : P false)
                  (x : Bool) : P x \elim x
    | true => t
    | false => f

  \module Exercise9 \where {
    \data D | con1 Nat | con2 D D | con3 (Nat -> D)

    \func D-elim (P : D -> \Type)
                 (c1 : \Pi (n : Nat) -> P (con1 n))
                 (c2 : \Pi (e f : D) (p : P e) (q : P f) -> P (con2 e f))
                 (c3 : \Pi (f : Nat -> D) (p : \Pi (x : Nat) -> P (f x)) -> P (con3 f))
                 (d : D) : P d \elim d
      | con1 n => c1 n
      | con2 d1 d2 => c2 d1 d2 (D-elim P c1 c2 c3 d1) (D-elim P c1 c2 c3 d2)
      | con3 f => c3 f (Nat-elim
          (\lam n => P (f n))
          (D-elim P c1 c2 c3 (f 0))
          (\lam n _ => (D-elim P c1 c2 c3 (f (suc n))))
      )

    \func D-rec (P : \Type)
                (c1 : Nat -> P)
                (c2 : D -> D -> P -> P -> P)
                (c3 : (Nat -> D) -> (Nat -> P) -> P)
                (d : D) : P =>
      D-elim (\lam _ => P) c1 c2 c3 d
  }

  \module Exercise10 \where {
    \open DefinitionOf= (pmap)
    \open Basics.Lists (List, nil, cons, /)

    -- Define recursor and eliminator for List.

    \func List-elim {A : \Type}
                    (P : List A -> \Type)
                    (n : P nil)
                    (c : \Pi (a : A) (l : List A) (p : P l) -> P (cons a l))
                    (l : List A) : P l \elim l
      | nil => n
      | cons a l => c a l (List-elim P n c l)

    \func List-rec {A : \Type}
                   (P : \Type)
                   (n : P)
                   (c : A -> List A -> P -> P)
                   (l : List A) : P =>
      List-elim (\lam _ => P) n c l

    \func \infixl 6 ++ {A : \Type} (l r : List A) : List A =>
      List-rec (List A) r (\lam x xs ys => x / ys) l

    \func ++-test : (1 / 2 / nil) ++ (3 / 4 / nil) = (1 / 2 / 3 / 4 / nil) => idp

    \func ++-assoc {A : \Type} (x y z : List A) : (x ++ y) ++ z = x ++ (y ++ z) =>
      List-elim (\lam x' => (x' ++ y) ++ z = x' ++ (y ++ z)) idp (\lam a _ p => pmap (cons a) p) x
  }
}
